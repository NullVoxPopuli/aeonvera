# Auto DevOps
# This CI/CD configuration provides a standard pipeline for
# * building a Docker image (using a buildpack if necessary),
# * storing the image in the container registry,
# * running tests from a buildpack,
# * running code quality analysis,
# * creating a review app for each topic branch,
# * and continuous deployment to production
#
# In order to deploy, you must have a Kubernetes cluster configured either
# via a project integration, or via group/project variables.
# AUTO_DEVOPS_DOMAIN must also be set as a variable at the group or project
# level, or manually added below.
#
# If you want to deploy to staging first, or enable canary deploys,
# uncomment the relevant jobs in the pipeline below.
#
# If Auto DevOps fails to detect the proper buildpack, or if you want to
# specify a custom buildpack, set a project variable `BUILDPACK_URL` to the
# repository URL of the buildpack.
# e.g. BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-ruby.git#v142
# If you need multiple buildpacks, add a file to your project called
# `.buildpacks` that contains the URLs, one on each line, in order.
# Note: Auto CI does not work with multiple buildpacks yet

image: alpine:latest

variables:
  # AUTO_DEVOPS_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  # AUTO_DEVOPS_DOMAIN: domain.example.com

  POSTGRES_USER: user
  POSTGRES_PASSWORD: testing-password
  POSTGRES_ENABLED: "true"
  POSTGRES_DB: $CI_ENVIRONMENT_SLUG
  DOCKER_HOST: /var/run/docker.sock

stages:
  - build
  - test
  - production

.rspec:
  stage: test
  image: ruby:2.4.1

  tags:
    - docker

  services:
    - postgres
    - redis
  variables:
    POSTGRES_DB: aeonvera_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres

    DATABASE_HOST: postgres
    DATABASE_NAME: aeonvera_test
    DATABASE_USERNAME: postgres
    DATABASE_PASSWORD: postgres

    REDIS_URL: redis://redis:6379

  before_script:
    - |
      time (
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter
        ./cc-test-reporter before-build
      )

  script:
    - gem install bundler
    - gem install therubyracer
    - gem install execjs
    - apt-get update
    - apt-get install -y nodejs
    - bundle install
    - bundle exec rake parallel:setup
    - COVERAGE=true bundle exec parallel_rspec app/ spec/

  after_script:
    - time ./cc-test-reporter after-build
  artifacts:
    paths:
      - coverage/
  only:
    - branches


# test:
#   stage: test
#   image: tmaier/docker-compose
#   # services:
#   #   - docker:dind
#   script:
#     - scripts/ci/test.sh
#     - docker-compose -f docker-compose.ci.yml down --remove-orphans
#   only:
#     - branches

# codequality:
#   image: docker:latest
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:dind
#   script:
#     - codeclimate
#   artifacts:
#     paths: [codeclimate.json]

# This job continuously deploys to production on every push to `master`.
# To make this a manual process, either because you're enabling `staging`
# or `canary` deploys, or you simply want more control over when you deploy
# to production, uncomment the `when: manual` line in the `production` job.

production:
  stage: production
  services:
    - docker:dind
  script:
    # - apk add --update bash py-pip
    # - pip install docker-compose
    - echo $( cat /etc/passwd)
    - su -s /bin/sh -c "./deployment/to-nanobox" guest
    # - ./deployment/to-nanobox
  environment:
    name: production
    url: https://aeonvera.com
  # only:
  #   refs:
  #     - master
#  when: manual

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA

  function codeclimate() {
    cc_opts="--env CODECLIMATE_CODE="$PWD" \
             --volume "$PWD":/code \
             --volume /var/run/docker.sock:/var/run/docker.sock \
             --volume /tmp/cc:/tmp/cc"

    docker run ${cc_opts} codeclimate/codeclimate init
    docker run ${cc_opts} codeclimate/codeclimate analyze -f json > codeclimate.json
  }

  # NANABOX_APP_NAME
  # NANOBOX_USERNAME
  # NANOBOX_PASSWORD
  function install_nanobox() {
    wget https://s3.amazonaws.com/tools.nanobox.io/nanobox/v2/linux/amd64/nanobox

    chmod +x ./nanobox

    ./nanobox config set ci-mode true
    ./nanobox config set provider native

    ./nanobox remote add $NANOBOX_APP_NAME

    echo "Nanobox is ready to go!"
  }

before_script:
  - *auto_devops
