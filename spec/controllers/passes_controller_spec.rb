require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe HostedEvents::PassesController do

  let(:event){ create(:event) }
  let(:hosted_event_params){ { hosted_event_id: event.id.to_s } }

  # This should return the minimal set of attributes required to create a valid
  # Pass. As you add validations to Pass, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { event_id: event.id } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PassesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    login
    event.hosted_by = @user
    event.save
  end

  describe "GET index" do
    it "assigns all passes as @passes" do
      pass = Pass.create! valid_attributes
      get :index, hosted_event_params
      assigns(:passes).should eq([pass])
    end
  end

  describe "GET show" do
    it "assigns the requested pass as @pass" do
      pass = Pass.create! valid_attributes
      get :show, hosted_event_params.merge({:id => pass.to_param}), valid_session
      assigns(:pass).should eq(pass)
    end
  end

  describe "GET new" do
    it "assigns a new pass as @pass" do
      get :new, hosted_event_params, valid_session
      assigns(:pass).should be_a_new(Pass)
    end
  end

  describe "GET edit" do
    it "assigns the requested pass as @pass" do
      pass = Pass.create! valid_attributes
      get :edit, hosted_event_params.merge({:id => pass.to_param}), valid_session
      assigns(:pass).should eq(pass)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Pass" do
        expect {
          post :create, hosted_event_params.merge({:pass => valid_attributes}), valid_session
        }.to change(Pass, :count).by(1)
      end

      it "assigns a newly created pass as @pass" do
        post :create, hosted_event_params.merge({:pass => valid_attributes}), valid_session
        assigns(:pass).should be_a(Pass)
        assigns(:pass).should be_persisted
      end

      it "redirects to the created pass" do
        post :create, hosted_event_params.merge({:pass => valid_attributes}), valid_session
        response.should redirect_to(hosted_event_passes_path(event))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved pass as @pass" do
        # Trigger the behavior that occurs when invalid params are submitted
        Pass.any_instance.stub(:save).and_return(false)
        post :create, hosted_event_params.merge({:pass => {  }}), valid_session
        assigns(:pass).should be_a_new(Pass)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Pass.any_instance.stub(:save).and_return(false)
        post :create, hosted_event_params.merge({:pass => {  }}), valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested pass" do
        pass = Pass.create! valid_attributes
        # Assuming there are no other passes in the database, this
        # specifies that the Pass created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Pass.any_instance.should_receive(:update).with({ "name" => "params" })
        put :update, hosted_event_params.merge({:id => pass.to_param, :pass => { "name" => "params" }}), valid_session
      end

      it "assigns the requested pass as @pass" do
        pass = Pass.create! valid_attributes
        put :update, hosted_event_params.merge({:id => pass.to_param, :pass => valid_attributes}), valid_session
        assigns(:pass).should eq(pass)
      end

      it "redirects to the pass" do
        pass = Pass.create! valid_attributes
        put :update, hosted_event_params.merge({:id => pass.to_param, :pass => valid_attributes}), valid_session
        response.should redirect_to(hosted_event_passes_path(event))
      end
    end

    describe "with invalid params" do
      it "assigns the pass as @pass" do
        pass = Pass.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Pass.any_instance.stub(:save).and_return(false)
        put :update, hosted_event_params.merge({:id => pass.to_param, :pass => {  }}), valid_session
        assigns(:pass).should eq(pass)
      end

      it "re-renders the 'edit' template" do
        pass = Pass.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Pass.any_instance.stub(:save).and_return(false)
        put :update, hosted_event_params.merge({:id => pass.to_param, :pass => {  }}), valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested pass" do
      pass = Pass.create! valid_attributes
      expect {
        delete :destroy, hosted_event_params.merge({:id => pass.to_param}), valid_session
      }.to change(Pass, :count).by(-1)
    end

    it "redirects to the passes list" do
      pass = Pass.create! valid_attributes
      delete :destroy, hosted_event_params.merge({:id => pass.to_param}), valid_session
      response.should redirect_to(hosted_event_passes_url(event))
    end
  end

end
